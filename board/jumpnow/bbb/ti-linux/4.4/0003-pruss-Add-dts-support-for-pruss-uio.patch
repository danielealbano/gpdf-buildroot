From 1437f2c11a04019741c44586d0d168a4ff05ac41 Mon Sep 17 00:00:00 2001
From: Scott Ellis <scott@jumpnowtek.com>
Date: Sat, 4 Mar 2017 16:33:46 -0500
Subject: [PATCH 3/4] pruss: Add dts support for pruss-uio

Cherry-picked from beagleboard-linux

  Subject: [PATCH 058/100] pruss: choose rproc or uio

With removal of beaglebone project specific pinctrl code.
---
 .../devicetree/bindings/arm/omap/omap.txt          |  2 +
 arch/arm/boot/dts/am33xx-pruss-rproc.dtsi          | 75 +++++++++++++++++++++
 arch/arm/boot/dts/am33xx-pruss-uio.dtsi            | 23 +++++++
 arch/arm/boot/dts/am33xx.dtsi                      | 58 +---------------
 arch/arm/mach-omap2/omap_device.c                  | 28 +++++++-
 drivers/uio/Kconfig                                |  2 +-
 drivers/uio/uio_pruss.c                            | 78 ++++++++++++++++++++--
 7 files changed, 199 insertions(+), 67 deletions(-)
 create mode 100644 arch/arm/boot/dts/am33xx-pruss-rproc.dtsi
 create mode 100644 arch/arm/boot/dts/am33xx-pruss-uio.dtsi

diff --git a/Documentation/devicetree/bindings/arm/omap/omap.txt b/Documentation/devicetree/bindings/arm/omap/omap.txt
index 6071ba2..4037b8e 100644
--- a/Documentation/devicetree/bindings/arm/omap/omap.txt
+++ b/Documentation/devicetree/bindings/arm/omap/omap.txt
@@ -24,6 +24,8 @@ Optional properties:
 - ti,no-reset-on-init: When present, the module should not be reset at init
 - ti,no-idle-on-init: When present, the module should not be idled at init
 - ti,no-idle: When present, the module is never allowed to idle.
+- ti,deassert-hard-reset: list of hwmod and hardware reset line name pairs
+  (ascii strings) to be deasserted upon device instantiation.
 
 Example:
 
diff --git a/arch/arm/boot/dts/am33xx-pruss-rproc.dtsi b/arch/arm/boot/dts/am33xx-pruss-rproc.dtsi
new file mode 100644
index 0000000..9d0f73d
--- /dev/null
+++ b/arch/arm/boot/dts/am33xx-pruss-rproc.dtsi
@@ -0,0 +1,75 @@
+/*
+ * Device Tree Source for AM33XX SoC pruss-rproc
+ *
+ * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This file is licensed under the terms of the GNU General Public License
+ * version 2.  This program is licensed "as is" without any warranty of any
+ * kind, whether express or implied.
+ */
+
+/ {
+	ocp {
+		pruss: pruss@4a300000 {
+			status = "okay";
+			compatible = "ti,am3352-pruss";
+			ti,hwmods = "pruss";
+			reg = <0x4a300000 0x2000>,
+			      <0x4a302000 0x2000>,
+			      <0x4a310000 0x3000>,
+			      <0x4a326000 0x2000>,
+			      <0x4a32e000 0x31c>,
+			      <0x4a332000 0x58>;
+			reg-names = "dram0", "dram1", "shrdram2", "cfg",
+			            "iep", "mii_rt";
+			#address-cells = <1>;
+			#size-cells = <1>;
+			ranges;
+
+			pruss_intc: intc@4a320000 {
+				compatible = "ti,am3352-pruss-intc";
+				reg = <0x4a320000 0x2000>;
+				reg-names = "intc";
+				interrupts = <20 21 22 23 24 25 26 27>;
+				interrupt-names = "host2", "host3", "host4",
+				                  "host5", "host6", "host7",
+				                  "host8", "host9";
+				interrupt-controller;
+				#interrupt-cells = <1>;
+			};
+
+			pru0: pru0@4a334000 {
+				compatible = "ti,am3352-pru";
+				reg = <0x4a334000 0x2000>,
+				      <0x4a322000 0x400>,
+				      <0x4a322400 0x100>;
+				reg-names = "iram", "control", "debug";
+				interrupt-parent = <&pruss_intc>;
+				interrupts = <16>, <17>;
+				interrupt-names = "vring", "kick";
+			};
+
+			pru1: pru1@4a338000 {
+				compatible = "ti,am3352-pru";
+				reg = <0x4a338000 0x2000>,
+				      <0x4a324000 0x400>,
+				      <0x4a324400 0x100>;
+				reg-names = "iram", "control", "debug";
+				interrupt-parent = <&pruss_intc>;
+				interrupts = <18>, <19>;
+				interrupt-names = "vring", "kick";
+			};
+
+			pruss_mdio: mdio@4a332400 {
+				compatible = "ti,davinci_mdio";
+				reg = <0x4a332400 0x90>;
+				clocks = <&dpll_core_m4_ck>;
+				clock-names = "fck";
+				bus_freq = <1000000>;
+				#address-cells = <1>;
+				#size-cells = <0>;
+				status = "disabled";
+			};
+		};
+	};
+};
diff --git a/arch/arm/boot/dts/am33xx-pruss-uio.dtsi b/arch/arm/boot/dts/am33xx-pruss-uio.dtsi
new file mode 100644
index 0000000..d7362bf
--- /dev/null
+++ b/arch/arm/boot/dts/am33xx-pruss-uio.dtsi
@@ -0,0 +1,23 @@
+/*
+ * Device Tree Source for AM33XX SoC pruss-uio
+ *
+ * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
+ *
+ * This file is licensed under the terms of the GNU General Public License
+ * version 2.  This program is licensed "as is" without any warranty of any
+ * kind, whether express or implied.
+ */
+
+/ {
+	ocp {
+		pruss: pruss@4a300000 {
+			status = "okay";
+			compatible = "ti,pruss-v2";
+			ti,deassert-hard-reset = "pruss", "pruss";
+			reg = <0x4a300000 0x080000>;
+			ti,pintc-offset = <0x20000>;
+			interrupt-parent = <&intc>;
+			interrupts = <20 21 22 23 24 25 26 27>;
+		};
+	};
+};
diff --git a/arch/arm/boot/dts/am33xx.dtsi b/arch/arm/boot/dts/am33xx.dtsi
index 1f65a98..5906f7d 100644
--- a/arch/arm/boot/dts/am33xx.dtsi
+++ b/arch/arm/boot/dts/am33xx.dtsi
@@ -929,64 +929,8 @@
 		};
 
 		pruss: pruss@4a300000 {
-			compatible = "ti,am3352-pruss";
 			ti,hwmods = "pruss";
-			reg = <0x4a300000 0x2000>,
-			      <0x4a302000 0x2000>,
-			      <0x4a310000 0x3000>,
-			      <0x4a326000 0x2000>,
-			      <0x4a32e000 0x31c>,
-			      <0x4a332000 0x58>;
-			reg-names = "dram0", "dram1", "shrdram2", "cfg",
-				    "iep", "mii_rt";
-			#address-cells = <1>;
-			#size-cells = <1>;
-			ranges;
-
-			pruss_intc: intc@4a320000 {
-				compatible = "ti,am3352-pruss-intc";
-				reg = <0x4a320000 0x2000>;
-				reg-names = "intc";
-				interrupts = <20 21 22 23 24 25 26 27>;
-				interrupt-names = "host2", "host3", "host4",
-						  "host5", "host6", "host7",
-						  "host8", "host9";
-				interrupt-controller;
-				#interrupt-cells = <1>;
-			};
-
-			pru0: pru0@4a334000 {
-				compatible = "ti,am3352-pru";
-				reg = <0x4a334000 0x2000>,
-				      <0x4a322000 0x400>,
-				      <0x4a322400 0x100>;
-				reg-names = "iram", "control", "debug";
-				interrupt-parent = <&pruss_intc>;
-				interrupts = <16>, <17>;
-				interrupt-names = "vring", "kick";
-			};
-
-			pru1: pru1@4a338000 {
-				compatible = "ti,am3352-pru";
-				reg = <0x4a338000 0x2000>,
-				      <0x4a324000 0x400>,
-				      <0x4a324400 0x100>;
-				reg-names = "iram", "control", "debug";
-				interrupt-parent = <&pruss_intc>;
-				interrupts = <18>, <19>;
-				interrupt-names = "vring", "kick";
-			};
-
-			pruss_mdio: mdio@4a332400 {
-				compatible = "ti,davinci_mdio";
-				reg = <0x4a332400 0x90>;
-				clocks = <&dpll_core_m4_ck>;
-				clock-names = "fck";
-				bus_freq = <1000000>;
-				#address-cells = <1>;
-				#size-cells = <0>;
-				status = "disabled";
-			};
+			status = "disabled";
 		};
 
 		elm: elm@48080000 {
diff --git a/arch/arm/mach-omap2/omap_device.c b/arch/arm/mach-omap2/omap_device.c
index 708adfd..a589282 100644
--- a/arch/arm/mach-omap2/omap_device.c
+++ b/arch/arm/mach-omap2/omap_device.c
@@ -122,8 +122,8 @@ static int omap_device_build_from_dt(struct platform_device *pdev)
 	struct omap_device *od;
 	struct omap_hwmod *oh;
 	struct device_node *node = pdev->dev.of_node;
-	const char *oh_name;
-	int oh_cnt, i, ret = 0;
+	const char *oh_name, *rst_name;
+	int oh_cnt, dstr_cnt, i, ret = 0;
 	bool device_active = false;
 
 	oh_cnt = of_property_count_strings(node, "ti,hwmods");
@@ -175,6 +175,30 @@ static int omap_device_build_from_dt(struct platform_device *pdev)
 		pm_runtime_set_active(&pdev->dev);
 	}
 
+	dstr_cnt = of_property_count_strings(node, "ti,deassert-hard-reset");
+
+	if (dstr_cnt > 0) {
+		for (i = 0; i < dstr_cnt; i += 2) {
+			of_property_read_string_index(
+				node, "ti,deassert-hard-reset", i,
+				&oh_name);
+
+			of_property_read_string_index(
+				node, "ti,deassert-hard-reset", i+1,
+				&rst_name);
+
+			oh = omap_hwmod_lookup(oh_name);
+			if (!oh) {
+				dev_warn(&pdev->dev,
+					"Cannot parse deassert property for '%s'\n",
+					oh_name);
+				break;
+			}
+
+			omap_hwmod_deassert_hardreset(oh, rst_name);
+		}
+	}
+
 odbfd_exit1:
 	kfree(hwmods);
 odbfd_exit:
diff --git a/drivers/uio/Kconfig b/drivers/uio/Kconfig
index 52c98ce..05400bc0 100644
--- a/drivers/uio/Kconfig
+++ b/drivers/uio/Kconfig
@@ -129,7 +129,7 @@ config UIO_PRUSS
 	select GENERIC_ALLOCATOR
 	depends on HAS_IOMEM && HAS_DMA
 	help
-	  PRUSS driver for OMAPL138/DA850/AM18XX devices
+	  PRUSS driver for OMAPL138/DA850/AM18XX and AM33XX devices
 	  PRUSS driver requires user space components, examples and user space
 	  driver is available from below SVN repo - you may use anonymous login
 
diff --git a/drivers/uio/uio_pruss.c b/drivers/uio/uio_pruss.c
index ca9e2fa..1cc0bec 100644
--- a/drivers/uio/uio_pruss.c
+++ b/drivers/uio/uio_pruss.c
@@ -19,6 +19,7 @@
 #include <linux/module.h>
 #include <linux/moduleparam.h>
 #include <linux/platform_device.h>
+#include <linux/of_gpio.h>
 #include <linux/uio_driver.h>
 #include <linux/platform_data/uio_pruss.h>
 #include <linux/io.h>
@@ -27,6 +28,11 @@
 #include <linux/sizes.h>
 #include <linux/slab.h>
 #include <linux/genalloc.h>
+#include <linux/of_address.h>
+#include <linux/of_device.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/err.h>
+#include <linux/pm_runtime.h>
 
 #define DRV_NAME "pruss_uio"
 #define DRV_VERSION "1.0"
@@ -106,10 +112,12 @@ static void pruss_cleanup(struct device *dev, struct uio_pruss_dev *gdev)
 		dma_free_coherent(dev, extram_pool_sz, gdev->ddr_vaddr,
 			gdev->ddr_paddr);
 	}
+#ifdef CONFIG_ARCH_DAVINCI_DA850
 	if (gdev->sram_vaddr)
 		gen_pool_free(gdev->sram_pool,
 			      gdev->sram_vaddr,
 			      sram_pool_sz);
+#endif
 	kfree(gdev->info);
 	clk_put(gdev->pruss_clk);
 	kfree(gdev);
@@ -120,9 +128,11 @@ static int pruss_probe(struct platform_device *pdev)
 	struct uio_info *p;
 	struct uio_pruss_dev *gdev;
 	struct resource *regs_prussio;
+	struct resource res;
 	struct device *dev = &pdev->dev;
 	int ret = -ENODEV, cnt = 0, len;
 	struct uio_pruss_pdata *pdata = dev_get_platdata(dev);
+	struct pinctrl *pinctrl;
 
 	gdev = kzalloc(sizeof(struct uio_pruss_dev), GFP_KERNEL);
 	if (!gdev)
@@ -134,6 +144,7 @@ static int pruss_probe(struct platform_device *pdev)
 		return -ENOMEM;
 	}
 
+#ifdef CONFIG_ARCH_DAVINCI_DA850
 	/* Power on PRU in case its not done as part of boot-loader */
 	gdev->pruss_clk = clk_get(dev, "pruss");
 	if (IS_ERR(gdev->pruss_clk)) {
@@ -145,8 +156,29 @@ static int pruss_probe(struct platform_device *pdev)
 	} else {
 		clk_enable(gdev->pruss_clk);
 	}
+#endif
+
+	if (pdev->dev.of_node) {
+		pm_runtime_enable(&pdev->dev);
+
+		ret = pm_runtime_get_sync(&pdev->dev);
+		if (IS_ERR_VALUE(ret)) {
+			dev_err(&pdev->dev, "pm_runtime_get_sync() failed\n");
+			return ret;
+		}
+
+		ret = of_address_to_resource(pdev->dev.of_node, 0, &res);
+		if (IS_ERR_VALUE(ret)) {
+			dev_err(&pdev->dev, "failed to parse DT reg\n");
+			return ret;
+		}
+
+		regs_prussio = &res;
+	}
+	else {
+		regs_prussio = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	}
 
-	regs_prussio = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!regs_prussio) {
 		dev_err(dev, "No PRUSS I/O resource specified\n");
 		goto out_free;
@@ -157,7 +189,14 @@ static int pruss_probe(struct platform_device *pdev)
 		goto out_free;
 	}
 
-	if (pdata->sram_pool) {
+
+	pinctrl = devm_pinctrl_get_select_default(&pdev->dev);
+	if (IS_ERR(pinctrl)) {
+		dev_warn(&pdev->dev,
+			"pins are not configured from the driver\n");
+	}
+
+	if (pdata && pdata->sram_pool) {
 		gdev->sram_pool = pdata->sram_pool;
 		gdev->sram_vaddr =
 			(unsigned long)gen_pool_dma_alloc(gdev->sram_pool,
@@ -182,14 +221,27 @@ static int pruss_probe(struct platform_device *pdev)
 		goto out_free;
 	}
 
-	gdev->pintc_base = pdata->pintc_base;
+	if (pdev->dev.of_node) {
+		ret = of_property_read_u32(pdev->dev.of_node,
+			"ti,pintc-offset",
+			&gdev->pintc_base);
+		if (ret < 0) {
+			dev_err(&pdev->dev,
+				"Can't parse ti,pintc-offset property\n");
+			goto out_free;
+		}
+	}
+	else {
+		gdev->pintc_base = pdata->pintc_base;
+	}
+
 	gdev->hostirq_start = platform_get_irq(pdev, 0);
 
 	for (cnt = 0, p = gdev->info; cnt < MAX_PRUSS_EVT; cnt++, p++) {
 		p->mem[0].addr = regs_prussio->start;
 		p->mem[0].size = resource_size(regs_prussio);
 		p->mem[0].memtype = UIO_MEM_PHYS;
-
+#ifdef CONFIG_ARCH_DAVINCI_DA850
 		p->mem[1].addr = gdev->sram_paddr;
 		p->mem[1].size = sram_pool_sz;
 		p->mem[1].memtype = UIO_MEM_PHYS;
@@ -197,7 +249,11 @@ static int pruss_probe(struct platform_device *pdev)
 		p->mem[2].addr = gdev->ddr_paddr;
 		p->mem[2].size = extram_pool_sz;
 		p->mem[2].memtype = UIO_MEM_PHYS;
-
+#else
+		p->mem[1].addr = gdev->ddr_paddr;
+		p->mem[1].size = extram_pool_sz;
+		p->mem[1].memtype = UIO_MEM_PHYS;
+#endif
 		p->name = kasprintf(GFP_KERNEL, "pruss_evt%d", cnt);
 		p->version = DRV_VERSION;
 
@@ -227,12 +283,20 @@ static int pruss_remove(struct platform_device *dev)
 	return 0;
 }
 
+static const struct of_device_id pruss_dt_ids[] = {
+	{ .compatible = "ti,pruss-v1", .data = NULL, },
+	{ .compatible = "ti,pruss-v2", .data = NULL, },
+	{},
+};
+MODULE_DEVICE_TABLE(of, pruss_dt_ids);
+
 static struct platform_driver pruss_driver = {
 	.probe = pruss_probe,
 	.remove = pruss_remove,
 	.driver = {
-		   .name = DRV_NAME,
-		   },
+		.name = DRV_NAME,
+		.of_match_table = pruss_dt_ids,
+	},
 };
 
 module_platform_driver(pruss_driver);
-- 
2.7.4

